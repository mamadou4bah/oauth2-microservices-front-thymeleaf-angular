spring.application.name=customer-app
server.port=8083
spring.datasource.url=jdbc:h2:mem:customers-db
spring.h2.console.enabled=true

## Authentication via Google App web
spring.security.oauth2.client.registration.google.clientId=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.user-name-attribute=email

## Authentication via Google App desktop
#spring.security.oauth2.client.registration.google.clientId=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
#spring.security.oauth2.client.registration.google.user-name-attribute=email

## Authentication via Github app web
spring.security.oauth2.client.registration.github.clientId=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user
spring.security.oauth2.client.registration.github.user-name-attribute=login

## Authentication via Keycloack
spring.security.oauth2.client.registration.keycloak.client-name=keycloak
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8083/login/oauth2/code/${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.issuer-uri=http://localhost:7080/realms/${KEYCLOAK_REALM}
spring.security.oauth2.client.registration.keycloak.user-name-attribute=preferred_username

#spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:7080/realms/${KEYCLOAK_REALM}